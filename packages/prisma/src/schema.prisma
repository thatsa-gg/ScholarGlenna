generator client {
    provider = "prisma-client-js"
    output = "../generated/client"
    previewFeatures = [ "extendedWhereUnique", "views", "clientExtensions", "multiSchema" ]
    binaryTargets = [ "native", "linux-musl-openssl-3.0.x" ]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = [ "log", "guild", "app", "role", "public" ]
}

enum CharacterClass {
    Elementalist @map("elementalist")
    Engineer     @map("engineer")
    Guardian     @map("guardian")
    Mesmer       @map("mesmer")
    Necromancer  @map("necromancer")
    Ranger       @map("ranger")
    Revenant     @map("revenant")
    Thief        @map("thief")
    Warrior      @map("warrior")

    @@schema("public")
    @@map("characterclass")
}

enum EliteSpecialization {
    Core            @map("core")
    Tempest         @map("tempest")
    Scrapper        @map("scrapper")
    Dragonhunter    @map("dragonhunter")
    Chronomancer    @map("chronomancer")
    Reaper          @map("reaper")
    Druid           @map("druid")
    Herald          @map("herald")
    Daredevil       @map("daredevil")
    Berserker       @map("berserker")
    Weaver          @map("weaver")
    Holosmith       @map("holosmith")
    Firebrand       @map("firebrand")
    Mirage          @map("mirage")
    Scourge         @map("scourge")
    Soulbeast       @map("soulbeast")
    Renegade        @map("renegade")
    Deadeye         @map("deadeye")
    Spellbreaker    @map("spellbreaker")
    Catalyst        @map("catalyst")
    Mechanist       @map("mechanist")
    Willbender      @map("willbender")
    Virtuoso        @map("virtuoso")
    Harbinger       @map("harbinger")
    Untamed         @map("untamed")
    Vindicator      @map("vindicator")
    Specter         @map("specter")
    Bladesworn      @map("bladesworn")

    @@schema("public")
    @@map("elitespecialization")
}

enum BuildCategory {
    DPS             @map("dps")
    DPSSupport      @map("dpssupport")
    HealSupport     @map("healsupport")
    HybridSupport   @map("hybridsupport")
    Specialized     @map("specialized")

    @@schema("public")
    @@map("buildcategory")
}

enum BuildDamageType {
    Power           @map("power")
    Condition       @map("condition")
    Hybrid          @map("hybrid")

    @@schema("public")
    @@map("builddamagetype")
}

enum BuildKeyBoon {
    Alacrity        @map("alacrity")
    Quickness       @map("quickness")

    @@schema("public")
    @@map("buildkeyboon")
}

// ========================================================================== //
//                                   LOGS                                     //
// ========================================================================== //

enum LogDifficultyType {
    NormalMode      @map("normal_mode")
    ChallengeMode   @map("challenge_mode")
    Emboldened      @map("emboldened_mode")

    @@schema("log")
    @@map("logdifficultytype")
}

enum Boss {
    // Wing 1
    ValeGuardian    @map("vale_guardian")
    Gorseval        @map("gorseval")
    Sabetha         @map("sabetha")

    // Wing 2
    Slothasor       @map("slothasor")
    BanditTrio      @map("bandit_trio")
    Matthias        @map("matthias")

    // Wing 3
    Escort          @map("escort")
    KeepConstruct   @map("keep_construct")
    TwistedCastle   @map("twisted_castle")
    Xera            @map("xera")

    // Wing 4
    Cairn           @map("cairn")
    MursaatOverseer @map("mursaat_overseer")
    Samarog         @map("samarog")
    Deimos          @map("deimos")

    // Wing 5
    SoullessHorror  @map("soulless_horror")
    RiverOfSouls    @map("river_of_souls")
    BrokenKing      @map("broken_king")
    SoulEater       @map("soul_eater")
    EyeOfJudgmentFate @map("eye_of_judgement_fate")
    Dhuum           @map("dhuum")

    // Wing 6
    ConjuredAmalgamate @map("conjured_amalgamate")
    TwinLargos      @map("twin_largos")
    Qadim           @map("qadim")

    // Wing 7
    Adina           @map("adina")
    Sabir           @map("sabir")
    QadimThePeerless @map("qadim_the_peerless")

    // Strikes
    Freezie         @map("freezie")
    IcebroodConstruct @map("icebrood_construct")
    FraenirOfJormag @map("fraenir_of_jormag")
    VoiceClawOfTheFallen @map("voice_claw_of_the_fallen")
    Boneskinner     @map("boneskinner")
    WhisperOfJormag @map("whisper_of_jormag")
    ColdWar         @map("cold_war")

    // Strikes 2
    AetherbladeHideout @map("aetherblade_hideout")
    XunlaiJadeJunkyard @map("xunlai_jade_junkyard")
    KainengOverlook @map("kaineng_overlook")
    HarvestTemple   @map("harvest_temple")
    OldLionsCourt   @map("old_lions_court")

    @@schema("log")
    @@map("boss")
}

model LogPlayer {
    id Int @id @default(autoincrement()) @map("log_player_id")
    logId Int @map("log_id")
    log Log @relation(references: [id], fields: [logId], onDelete: Cascade)

    teamMemberId Int? @map("team_member_id")
    teamMember TeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)

    character String
    account String
    group Int
    class CharacterClass
    specialization EliteSpecialization

    extendedData Json?

    @@schema("log")
    @@map("log_player")
}

model Log {
    id Int @id @default(autoincrement()) @map("log_id")
    teamId Int @map("team_id")
    url String @unique
    boss Boss
    difficulty LogDifficultyType
    emboldenedLevel Int @db.SmallInt @map("emboldened_level") @default(0)
    success Boolean
    duration Int // milliseconds

    players LogPlayer[]
    team Team @relation(fields: [teamId], references: [id], onDelete: Restrict)

    startAt DateTime @db.Timestamptz(3) @map("start_at")
    submittedAt DateTime @db.Timestamptz(3) @map("submitted_at")

    @@schema("public")
    @@map("log")
}

// ========================================================================== //
//                                  USERS                                     //
// ========================================================================== //

model User {
    id Int @id @default(autoincrement()) @map("user_id")
    snowflake BigInt @unique
    name String
    icon String?
    alias String @unique

    guildMemberships GuildMember[]
    accounts Account[]
    profile Profile?
    roles RoleMember[]
    guildMemberRoles GuildRoleMember[]
    teamMemberRoles TeamRoleMember[]
    permissions Permission[]
    guildMemberPermissions GuildMemberPermission[]
    teamMemberPermissions TeamMemberPermission[]
    @@schema("guild")
    @@map("user")
}

model Account {
    id Int @id @default(autoincrement()) @map("account")
    snowflake BigInt @unique
    userId Int @map("user_id")
    name String @unique
    apiKey String? @ignore

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@schema("guild")
    @@map("account")
}

// ========================================================================== //
//                                  GUILDS                                    //
// ========================================================================== //

model Guild {
    id Int @id @default(autoincrement()) @map("guild_id")
    snowflake BigInt @unique
    name String
    alias String @unique @db.VarChar(32)
    inviteURL String? @map("invite_url")

    acronym String @db.VarChar(8)
    icon String?

    // Marks when the bot first became aware it wasn't in a guild anymore.
    lostRemoteReferenceAt DateTime? @db.Timestamptz(3) @map("lost_remote_reference_at")

    permission GuildPermission?
    teams Team[]
    members GuildMember[]
    divisions Division[]

    statistics GuildStatistics @relation(fields: [id], references: [guildId])

    roles Role[]
    @@schema("guild")
    @@map("guild")
}

view GuildStatistics {
    guildId Int @id @map("guild_id")
    uniqueTeamMembers Int @map("unique_team_members")
    uniqueManagementMembers Int @map("unique_management_members")
    uniqueInterestGroupMembers Int @map("unique_interest_members")

    guild Guild?
    @@schema("guild")
    @@map("guildstatistics")
}

model GuildMember {
    id Int @id @default(autoincrement()) @map("guild_member_id")
    snowflake BigInt // same as user.snowflake, to ease lookups and handling
    guildId Int @map("guild_id")
    userId Int @map("user_id")
    name String?
    icon String?

    willingToLead Boolean? @map("willing_to_lead")

    // Marks when the bot first became aware a user wasn't in a guild anymore.
    lostRemoteReferenceAt DateTime? @db.Timestamptz(3) @map("lost_remote_reference_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    teamMemberships TeamMember[]
    roles GuildRoleMember[]
    teamMemberRoles TeamRoleMember[]
    permissions GuildMemberPermission[]
    teamMemberPermissions TeamMemberPermission[]

    @@unique([userId, guildId])
    @@unique([snowflake, guildId])
    @@schema("guild")
    @@map("guildmember")
}

// ========================================================================== //
//                                 DIVISIONS                                  //
// ========================================================================== //

model Division {
    id Int @id @default(autoincrement()) @map("division_id")
    guildId Int @map("guild_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    name String

    // There will be at most one primary division per guild (unique index: only_one_primary_division_per_guild)
    primary Boolean @default(false)

    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    teams Team[]
    permission DivisionPermission?
    @@schema("guild")
    @@map("division")
}

// ========================================================================== //
//                                  TEAMS                                     //
// ========================================================================== //

enum TeamType {
    Normal          @map("normal")
    Management      @map("management")
    InterestGroup   @map("interest_group")
    Inactive        @map("inactive")

    @@schema("guild")
    @@map("teamtype")
}

enum TeamMemberRole {
    Member          @map("member")
    Representative  @map("representative")
    Captain         @map("captain")

    @@schema("guild")
    @@map("teammemberrole")
}

enum TeamFocus {
    HOT             @map("hot")
    POF             @map("pof")
    RaidCM          @map("raid_cm")
    FullClear       @map("full_clear")
    FullClearCM     @map("full_clear_cm")
    EODCM           @map("eod_cm")
    HarvestTempleCM @map("harvest_temple_cm")
    Memes           @map("memes")
    IBS             @map("ibs")
    EOD             @map("eod")
    Dungeons        @map("dungeons")
    Fractals        @map("fractals")

    @@schema("guild")
    @@map("teamfocus")
}

enum TeamLevel {
    Progression     @map("progression")
    Experienced     @map("experienced")

    @@schema("guild")
    @@map("teamlevel")
}

enum TeamRegion {
    NorthAmerica    @map("north_america")
    Europe          @map("europe")
    AustraliaNA     @map("ocx_na")
    AustraliaEU     @map("ocx_eu")

    @@schema("guild")
    @@map("teamregion")
}

enum TeamDaylightSavings {
    RespectTime     @map("respect_time")
    RespectReset    @map("respect_reset")

    @@schema("guild")
    @@map("teamdaylightsavings")
}

model Team {
    id Int @id @default(autoincrement()) @map("team_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    guildId Int @map("guild_id")
    divisionId Int @map("division_id")
    type TeamType @default(Normal)
    name String
    alias String @db.VarChar(32)
    focus TeamFocus @default(HOT)
    level TeamLevel @default(Progression)
    region TeamRegion @default(NorthAmerica)
    capacity Int? @db.SmallInt @default(10)
    primaryTimeZone String @default("America/Detroit") @map("primary_time_zone")
    daylightSavings TeamDaylightSavings @default(RespectReset) @map("daylight_savings")
    levelCheckCutoffDate DateTime @db.Timestamptz(3) @map("level_check_cutoff") @default(dbgenerated("'1970-01-01 00:00:00+00'"))

    role BigInt?
    channel BigInt?
    icon String?

    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
    division Division @relation(fields: [divisionId], references: [id], onDelete: Restrict)
    members TeamMember[]
    logs Log[]
    times TeamTime[]

    permission TeamPermission?
    roles Role[]

    @@unique([guildId, alias])
    @@schema("guild")
    @@map("team")
}

model TeamTime {
    id Int @id @default(autoincrement()) @map("team_time_id")
    teamId Int @map("team_id")
    index Int
    time DateTime @db.Timestamptz(0)
    duration Int @default(120) // minutes

    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@unique([teamId, index])
    @@schema("guild")
    @@map("teamtime")
}

model TeamMember {
    id Int @id @default(autoincrement()) @map("team_member_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    teamId Int @map("team_id")
    memberId Int @map("guild_member_id")
    role TeamMemberRole @default(Member)

    computed TeamMemberComputed @relation(fields: [id], references: [id])
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    member GuildMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
    logParticipation LogPlayer[]
    roles TeamRoleMember[]

    @@unique([teamId, memberId])
    @@schema("guild")
    @@map("teammember")
}

view TeamMemberComputed {
    id Int @id @map("team_member_id")

    username String
    nickname String?

    memberAvatar String? @map("member_avatar")
    userAvatar String? @map("user_avatar")

    member TeamMember?
    @@schema("guild")
    @@map("teammembercomputed")
}

// ========================================================================== //
//                               PERMISSIONS                                  //
// ========================================================================== //
enum RoleType {
    Public @map("public")
    SuperUser @map("superuser")
    AnyGuildMember @map("any_guild_member")
    AnyTeamMember @map("any_team_member")
    AnyTeamRepresentative @map("any_team_representative")
    AnyTeamCaptain @map("any_team_captain")
    ManagementMember @map("management_member")
    ManagementRepresentative @map("management_representative")
    ManagementCaptain @map("management_captain")
    TeamMember @map("team_member")
    TeamRepresentative @map("team_representative")
    TeamCaptain @map("team_captain")

    @@schema("role")
    @@map("roletype")
}

model Role {
    id Int @id @default(autoincrement()) @map("role_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))
    guildId Int? @map("guild_id")
    teamId Int? @map("team_id")
    type RoleType

    parent RoleChild[] @relation("parent")
    children RoleChild[] @relation("child")

    guild Guild? @relation(fields: [guildId], references: [id], onDelete: Cascade)
    team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
    members RoleMember[]
    guildMembers GuildRoleMember[]
    teamMembers TeamRoleMember[]
    permissions Permission[]
    guildMemberPermissions GuildMemberPermission[]
    teamMemberPermissions TeamMemberPermission[]

    // back-references for object-associated roles
    guildMemberRole GuildPermission? @relation("any_member_role")
    anyTeamMemberRole GuildPermission? @relation("any_team_member_role")
    anyTeamRepresentativeRole GuildPermission? @relation("any_team_representative_role")
    anyTeamCaptainRole GuildPermission? @relation("any_team_captain_role")
    managementMemberRole GuildPermission? @relation("management_member_role")
    managementRepresentativeRole GuildPermission? @relation("management_representative_role")
    managementCaptainRole GuildPermission? @relation("management_captain_role")

    teamMemberRole TeamPermission? @relation("team_member_role")
    teamRepresentativeRole TeamPermission? @relation("team_representative_role")
    teamCaptainRole TeamPermission? @relation("team_captain_role")

    // back-references for all permissions
    guildUpdate GuildPermission[] @relation("guild_update")
    guildRead GuildPermission[] @relation("guild_read")
    guildCreateTeam GuildPermission[] @relation("guild_create_team")
    guildCreateDivision GuildPermission[] @relation("guild_create_division")

    divisionUpdate DivisionPermission[] @relation("division_update")
    divisionDelete DivisionPermission[] @relation("division_delete")
    divisionRead DivisionPermission[] @relation("division_read")

    teamUpdate TeamPermission[] @relation("team_update")
    teamDelete TeamPermission[] @relation("team_delete")
    teamRead TeamPermission[] @relation("team_read")
    teamUpdateDivision TeamPermission[] @relation("team_update_division")
    teamUpdateRole TeamPermission[] @relation("team_update_role")
    teamCreateMember TeamPermission[] @relation("team_create_member")
    teamUpdateMember TeamPermission[] @relation("team_update_member")
    teamDeleteMember TeamPermission[] @relation("team_delete_member")
    teamCreateTime TeamPermission[] @relation("team_create_time")
    teamUpdateTime TeamPermission[] @relation("team_update_time")
    teamDeleteTime TeamPermission[] @relation("team_delete_time")

    @@unique([ guildId, teamId, type ])
    @@schema("role")
    @@map("role")
}

model RoleChild {
    id Int @id @default(autoincrement()) @map("role_child_id")
    parentId Int @map("parent_id")
    childId Int @map("child_id")

    parent Role @relation("child", fields: [parentId], references: [id], onDelete: Restrict) // must delete children first
    child Role @relation("parent", fields: [childId], references: [id], onDelete: Cascade)

    @@unique([parentId, childId])
    @@schema("role")
    @@map("rolechild")
}

model RoleMember {
    id Int @id @default(autoincrement()) @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([ userId, roleId ])
    @@schema("role")
    @@map("rolemember")
}

model GuildRoleMember {
    // inherits RoleMember
    id Int @id @default(autoincrement()) @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")
    guildMemberId Int @map("guild_member_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    guildMember GuildMember @relation(fields: [guildMemberId], references: [id], onDelete: Cascade)

    @@unique([ userId, roleId ])
    @@schema("role")
    @@map("guildrolemember")
}

model TeamRoleMember {
    // inherits GuildRoleMember
    id Int @id @default(autoincrement()) @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")
    guildMemberId Int @map("guild_member_id")
    teamMemberId Int @map("team_member_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
    guildMember GuildMember @relation(fields: [guildMemberId], references: [id], onDelete: Cascade)
    teamMember TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

    @@unique([ userId, roleId ])
    @@schema("role")
    @@map("teamrolemember")
}

view Permission {
    id Int @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")

    user User @relation(fields: [userId], references: [id])
    role Role @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
    @@schema("role")
    @@map("permissions")
}

view GuildMemberPermission {
    id Int @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")
    guildMemberId Int @map("guild_member_id")

    user User @relation(fields: [userId], references: [id])
    role Role @relation(fields: [roleId], references: [id])
    guildMember GuildMember @relation(fields: [guildMemberId], references: [id])

    @@unique([userId, roleId])
    @@unique([guildMemberId, roleId])
    @@schema("role")
    @@map("guildmemberpermissions")
}

view TeamMemberPermission {
    id Int @map("role_member_id")
    userId Int @map("user_id")
    roleId Int @map("role_id")
    guildMemberId Int? @map("guild_member_id")

    user User @relation(fields: [userId], references: [id])
    role Role @relation(fields: [roleId], references: [id])
    guildMember GuildMember? @relation(fields: [guildMemberId], references: [id])

    @@unique([userId, roleId])
    @@unique([guildMemberId, roleId])
    @@schema("role")
    @@map("teammemberpermissions")
}

model GuildPermission {
    id Int @default(autoincrement()) @unique @map("guild_permission_id")
    guildId Int @unique @map("guild_id")
    guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

    anyMemberRoleId Int @unique @map("any_member_role")
    anyTeamMemberRoleId Int @unique @map("any_team_member_role")
    anyTeamRepresentativeRoleId Int @unique @map("any_team_representative_role")
    anyTeamCaptainRoleId Int @unique @map("any_team_captain_role")
    managementMemberRoleId Int @unique @map("management_member_role")
    managementRepresentativeRoleId Int @unique @map("management_representative_role")
    managementCaptainRoleId Int @unique @map("management_captain_role")

    members Role @relation("any_member_role", fields: [anyMemberRoleId], references: [id], onDelete: Restrict)
    teamMembers Role @relation("any_team_member_role", fields: [anyTeamMemberRoleId], references: [id], onDelete: Restrict)
    teamRepresentatives Role @relation("any_team_representative_role", fields: [anyTeamRepresentativeRoleId], references: [id], onDelete: Restrict)
    teamCaptains Role @relation("any_team_captain_role", fields: [anyTeamCaptainRoleId], references: [id], onDelete: Restrict)
    managers Role @relation("management_member_role", fields: [managementMemberRoleId], references: [id], onDelete: Restrict)
    managerRepresentatives Role @relation("management_representative_role", fields: [managementRepresentativeRoleId], references: [id], onDelete: Restrict)
    managerCaptains Role @relation("management_captain_role", fields: [managementCaptainRoleId], references: [id], onDelete: Restrict)

    updateId Int @map("update")
    readId   Int @map("read")
    createTeamId Int @map("create_team")
    createDivisionId Int @map("create_division")

    update Role @relation("guild_update", fields: [updateId], references: [id], onDelete: Restrict)
    read   Role @relation("guild_read", fields: [readId], references: [id], onDelete: Restrict)
    createTeam Role @relation("guild_create_team", fields: [createTeamId], references: [id], onDelete: Restrict)
    createDivision Role @relation("guild_create_division", fields: [createDivisionId], references: [id], onDelete: Restrict)

    @@schema("role")
    @@map("guildpermission")
}

model DivisionPermission {
    id Int @default(autoincrement()) @unique @map("division_permission_id")
    divisionId Int @unique @map("division_id")
    division Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)

    updateId Int @map("update")
    deleteId Int? @map("delete")
    readId   Int @map("read")

    update Role @relation("division_update", fields: [updateId], references: [id], onDelete: Restrict)
    delete Role? @relation("division_delete", fields: [deleteId], references: [id], onDelete: Restrict)
    read   Role @relation("division_read", fields: [readId], references: [id], onDelete: Restrict)

    @@schema("role")
    @@map("divisionpermission")
}

model TeamPermission {
    id Int @default(autoincrement()) @unique @map("team_permission_id")
    teamId Int @unique @map("team_id")
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

    memberRoleId Int @unique @map("member_role")
    representativeRoleId Int @unique @map("representative_role")
    captainRoleId Int @unique @map("captain_role")

    members Role @relation("team_member_role", fields: [memberRoleId], references: [id], onDelete: Restrict)
    representatives Role @relation("team_representative_role", fields: [representativeRoleId], references: [id], onDelete: Restrict)
    captains Role @relation("team_captain_role", fields: [captainRoleId], references: [id], onDelete: Restrict)

    updateId Int @map("update")
    deleteId Int? @map("delete")
    readId   Int @map("read")

    updateDivisionId Int? @map("update_division")
    updateRoleId     Int @map("update_role")

    createMemberId Int @map("create_member")
    updateMemberId Int @map("update_member")
    deleteMemberId Int @map("delete_member")

    createTimeId Int? @map("create_time")
    updateTimeId Int? @map("update_time")
    deleteTimeId Int? @map("delete_time")

    update Role @relation("team_update", fields: [updateId], references: [id], onDelete: Restrict)
    delete Role? @relation("team_delete", fields: [deleteId], references: [id], onDelete: Restrict)
    read   Role @relation("team_read", fields: [readId], references: [id], onDelete: Restrict)

    updateDivision Role? @relation("team_update_division", fields: [updateDivisionId], references: [id], onDelete: Restrict)
    updateRole     Role @relation("team_update_role", fields: [updateRoleId], references: [id], onDelete: Restrict)

    createMember Role @relation("team_create_member", fields: [createMemberId], references: [id], onDelete: Restrict)
    updateMember Role @relation("team_update_member", fields: [updateMemberId], references: [id], onDelete: Restrict)
    deleteMember Role @relation("team_delete_member", fields: [deleteMemberId], references: [id], onDelete: Restrict)

    createTime Role? @relation("team_create_time", fields: [createTimeId], references: [id], onDelete: Restrict)
    updateTime Role? @relation("team_update_time", fields: [updateTimeId], references: [id], onDelete: Restrict)
    deleteTime Role? @relation("team_delete_time", fields: [deleteTimeId], references: [id], onDelete: Restrict)
    @@schema("role")
    @@map("teampermission")
}


// ========================================================================== //
//                                   APP                                      //
// ========================================================================== //

enum Visibility {
    Public @map("public")
    SameGuild @map("same_guild")
    SameTeam @map("same_team")
    Private @map("private")

    @@map("visibility")
    @@schema("app")
}

model Profile {
    id Int @id @default(autoincrement()) @map("profile_id")
    snowflake BigInt @unique // same as user.snowflake, to ease lookups and handling
    userId Int @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    builds PlayerBuild[]
    experience PlayerExperience?

    visibility Visibility @default(Private)
    @@schema("app")
    @@map("profile")
}

model Build {
    id Int @id @default(autoincrement()) @map("build_id")
    snowflake BigInt @unique @default(dbgenerated("new_snowflake()"))

    name String @unique
    class CharacterClass?
    specialization EliteSpecialization?

    category BuildCategory
    damageType BuildDamageType? @map("damage_type")
    keyBoon BuildKeyBoon? @map("key_boon")
    tank Boolean @default(false)

    players PlayerBuild[]

    @@schema("app")
    @@map("build")
}

model PlayerBuild {
    id Int @id @default(autoincrement()) @map("player_build_id")
    profileId Int @map("profile_id")
    buildId Int @map("build_id")

    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    build Build @relation(fields: [buildId], references: [id], onDelete: Cascade)

    @@schema("app")
    @@map("playerbuild")
}

model PlayerExperience {
    id Int @id @default(autoincrement()) @map("player_experience_id")
    profileId Int @unique @map("profile_id")

    totalFields Int @map("total_fields") @default(13) // the number of experience flags
    completedFields Int @map("completed_fields") @default(0) // how many flags the user has filled out

    wing1 Boolean?
    wing2 Boolean?
    wing3 Boolean?
    wing4 Boolean?
    wing5 Boolean?
    wing6 Boolean?
    wing7 Boolean?
    ibsNormalStrikes Boolean? @map("ibs_normal_strikes")
    eodNormalStrikes Boolean? @map("eod_normal_strikes")
    aetherbladeHideoutCM Boolean? @map("aetherblade_hideout_cm")
    xunlaiJadeJunkyardCM Boolean? @map("xunlai_jade_junkyard_cm")
    kainengOverlookCM Boolean? @map("kaineng_overlook_cm")
    harvestTempleCM Boolean? @map("harvest_temple_cm")

    // further encounters will need to be added here

    profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    @@schema("app")
    @@map("playerexperience")
}
